function debounce(fn, delay, headExection, resCallback) {
    if (delay === void 0) { delay = 1000; }
    if (headExection === void 0) { headExection = false; }
    var timer = null;
    var isInvoke = false;
    // 我们需要返回一个函数
    function _debounce() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new Promise(function (resolve, reject) {
            if (timer)
                clearTimeout(timer);
            // 判断是否需要立即执行
            if (headExection && !isInvoke) {
                var result = fn.apply(_this, args);
                if (resCallback && typeof resCallback === 'function')
                    resCallback(result);
                resolve(result);
                isInvoke = true;
            }
            else {
                timer = setTimeout(function () {
                    var result = fn.apply(_this, args);
                    if (resCallback && typeof resCallback === 'function')
                        resCallback(result);
                    resolve(result);
                    isInvoke = false;
                }, delay);
            }
        });
    }
    _debounce.cancel = function () {
        if (timer)
            clearTimeout(timer);
        timer = null;
    };
    return _debounce;
}

function throttle(fn, interval, options) {
    if (interval === void 0) { interval = 1000; }
    var leading = options.leading, tailing = options.tailing, resCallback = options.resCallback;
    var lastTime = 0;
    // 尾部执行时使用
    var timer = null;
    function _throttle() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new Promise(function (resolve, reject) {
            var nowTime = new Date().getTime();
            if (!lastTime && !leading)
                lastTime = nowTime;
            var remainTime = interval - (nowTime - lastTime);
            if (remainTime <= 0) {
                if (timer) {
                    clearTimeout(timer);
                    timer = null;
                }
                var result = fn.apply(_this, args);
                resolve(result);
                if (resCallback)
                    resCallback(result);
                lastTime = nowTime;
                // 防止添加定时器
                return;
            }
            if (tailing && !timer) {
                timer = setTimeout(function () {
                    timer = null;
                    lastTime = !leading ? 0 : new Date().getTime();
                    var result = fn.apply(_this, args);
                    resolve(result);
                    if (resCallback)
                        resCallback(result);
                }, remainTime);
            }
        });
    }
    _throttle.cancel = function () {
        if (timer)
            clearTimeout(timer);
        timer = null;
        lastTime = 0;
    };
    return _throttle;
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}

var _assign = function __assign() {
  _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return _assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function isObject$1(originValue) {
    return ((originValue !== null && typeof originValue === 'object') ||
        typeof originValue === 'function');
}
function deepClone(originValue, map) {
    // 循环引用
    // const map = new Map();
    var e_1, _a;
    if (map === void 0) { map = new WeakMap(); }
    if (typeof originValue === 'symbol') {
        return Symbol(originValue.description);
    }
    // if (originValue instanceof Set) {
    //   return new Set([...originValue]);
    // }
    // if (originValue instanceof Map) {
    //   return new Map([...originValue]);
    // }
    if (typeof originValue === 'function') {
        return originValue;
    }
    if (!isObject$1(originValue)) {
        return originValue;
    }
    if (map.has(originValue)) {
        return map.get(originValue);
    }
    var target = Array.isArray(originValue) ? [] : {};
    map.set(originValue, target);
    for (var key in originValue) {
        target[key] = deepClone(originValue[key], map);
    }
    // 对 symbol 进行特殊处理
    var symbolKeys = Object.getOwnPropertySymbols(originValue);
    try {
        for (var symbolKeys_1 = __values(symbolKeys), symbolKeys_1_1 = symbolKeys_1.next(); !symbolKeys_1_1.done; symbolKeys_1_1 = symbolKeys_1.next()) {
            var skey = symbolKeys_1_1.value;
            target[skey] = deepClone(originValue[skey], map);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (symbolKeys_1_1 && !symbolKeys_1_1.done && (_a = symbolKeys_1.return)) _a.call(symbolKeys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return target;
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var dayjs_min = {exports: {}};

(function (module, exports) {
  !function (t, e) {
    module.exports = e() ;
  }(commonjsGlobal, function () {

    var t = 1e3,
        e = 6e4,
        n = 36e5,
        r = "millisecond",
        i = "second",
        s = "minute",
        u = "hour",
        a = "day",
        o = "week",
        f = "month",
        h = "quarter",
        c = "year",
        d = "date",
        $ = "Invalid Date",
        l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,
        y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
        M = {
      name: "en",
      weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
      months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
    },
        m = function m(t, e, n) {
      var r = String(t);
      return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
    },
        g = {
      s: m,
      z: function z(t) {
        var e = -t.utcOffset(),
            n = Math.abs(e),
            r = Math.floor(n / 60),
            i = n % 60;
        return (e <= 0 ? "+" : "-") + m(r, 2, "0") + ":" + m(i, 2, "0");
      },
      m: function t(e, n) {
        if (e.date() < n.date()) return -t(n, e);
        var r = 12 * (n.year() - e.year()) + (n.month() - e.month()),
            i = e.clone().add(r, f),
            s = n - i < 0,
            u = e.clone().add(r + (s ? -1 : 1), f);
        return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
      },
      a: function a(t) {
        return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
      },
      p: function p(t) {
        return {
          M: f,
          y: c,
          w: o,
          d: a,
          D: d,
          h: u,
          m: s,
          s: i,
          ms: r,
          Q: h
        }[t] || String(t || "").toLowerCase().replace(/s$/, "");
      },
      u: function u(t) {
        return void 0 === t;
      }
    },
        D = "en",
        v = {};

    v[D] = M;

    var p = function p(t) {
      return t instanceof _;
    },
        S = function S(t, e, n) {
      var r;
      if (!t) return D;
      if ("string" == typeof t) v[t] && (r = t), e && (v[t] = e, r = t);else {
        var i = t.name;
        v[i] = t, r = i;
      }
      return !n && r && (D = r), r || !n && D;
    },
        w = function w(t, e) {
      if (p(t)) return t.clone();
      var n = "object" == _typeof(e) ? e : {};
      return n.date = t, n.args = arguments, new _(n);
    },
        O = g;

    O.l = S, O.i = p, O.w = function (t, e) {
      return w(t, {
        locale: e.$L,
        utc: e.$u,
        x: e.$x,
        $offset: e.$offset
      });
    };

    var _ = function () {
      function M(t) {
        this.$L = S(t.locale, null, !0), this.parse(t);
      }

      var m = M.prototype;
      return m.parse = function (t) {
        this.$d = function (t) {
          var e = t.date,
              n = t.utc;
          if (null === e) return new Date(NaN);
          if (O.u(e)) return new Date();
          if (e instanceof Date) return new Date(e);

          if ("string" == typeof e && !/Z$/i.test(e)) {
            var r = e.match(l);

            if (r) {
              var i = r[2] - 1 || 0,
                  s = (r[7] || "0").substring(0, 3);
              return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
            }
          }

          return new Date(e);
        }(t), this.$x = t.x || {}, this.init();
      }, m.init = function () {
        var t = this.$d;
        this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
      }, m.$utils = function () {
        return O;
      }, m.isValid = function () {
        return !(this.$d.toString() === $);
      }, m.isSame = function (t, e) {
        var n = w(t);
        return this.startOf(e) <= n && n <= this.endOf(e);
      }, m.isAfter = function (t, e) {
        return w(t) < this.startOf(e);
      }, m.isBefore = function (t, e) {
        return this.endOf(e) < w(t);
      }, m.$g = function (t, e, n) {
        return O.u(t) ? this[e] : this.set(n, t);
      }, m.unix = function () {
        return Math.floor(this.valueOf() / 1e3);
      }, m.valueOf = function () {
        return this.$d.getTime();
      }, m.startOf = function (t, e) {
        var n = this,
            r = !!O.u(e) || e,
            h = O.p(t),
            $ = function $(t, e) {
          var i = O.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
          return r ? i : i.endOf(a);
        },
            l = function l(t, e) {
          return O.w(n.toDate()[t].apply(n.toDate("s"), (r ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e)), n);
        },
            y = this.$W,
            M = this.$M,
            m = this.$D,
            g = "set" + (this.$u ? "UTC" : "");

        switch (h) {
          case c:
            return r ? $(1, 0) : $(31, 11);

          case f:
            return r ? $(1, M) : $(0, M + 1);

          case o:
            var D = this.$locale().weekStart || 0,
                v = (y < D ? y + 7 : y) - D;
            return $(r ? m - v : m + (6 - v), M);

          case a:
          case d:
            return l(g + "Hours", 0);

          case u:
            return l(g + "Minutes", 1);

          case s:
            return l(g + "Seconds", 2);

          case i:
            return l(g + "Milliseconds", 3);

          default:
            return this.clone();
        }
      }, m.endOf = function (t) {
        return this.startOf(t, !1);
      }, m.$set = function (t, e) {
        var n,
            o = O.p(t),
            h = "set" + (this.$u ? "UTC" : ""),
            $ = (n = {}, n[a] = h + "Date", n[d] = h + "Date", n[f] = h + "Month", n[c] = h + "FullYear", n[u] = h + "Hours", n[s] = h + "Minutes", n[i] = h + "Seconds", n[r] = h + "Milliseconds", n)[o],
            l = o === a ? this.$D + (e - this.$W) : e;

        if (o === f || o === c) {
          var y = this.clone().set(d, 1);
          y.$d[$](l), y.init(), this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d;
        } else $ && this.$d[$](l);

        return this.init(), this;
      }, m.set = function (t, e) {
        return this.clone().$set(t, e);
      }, m.get = function (t) {
        return this[O.p(t)]();
      }, m.add = function (r, h) {
        var d,
            $ = this;
        r = Number(r);

        var l = O.p(h),
            y = function y(t) {
          var e = w($);
          return O.w(e.date(e.date() + Math.round(t * r)), $);
        };

        if (l === f) return this.set(f, this.$M + r);
        if (l === c) return this.set(c, this.$y + r);
        if (l === a) return y(1);
        if (l === o) return y(7);
        var M = (d = {}, d[s] = e, d[u] = n, d[i] = t, d)[l] || 1,
            m = this.$d.getTime() + r * M;
        return O.w(m, this);
      }, m.subtract = function (t, e) {
        return this.add(-1 * t, e);
      }, m.format = function (t) {
        var e = this,
            n = this.$locale();
        if (!this.isValid()) return n.invalidDate || $;

        var r = t || "YYYY-MM-DDTHH:mm:ssZ",
            i = O.z(this),
            s = this.$H,
            u = this.$m,
            a = this.$M,
            o = n.weekdays,
            f = n.months,
            h = function h(t, n, i, s) {
          return t && (t[n] || t(e, r)) || i[n].substr(0, s);
        },
            c = function c(t) {
          return O.s(s % 12 || 12, t, "0");
        },
            d = n.meridiem || function (t, e, n) {
          var r = t < 12 ? "AM" : "PM";
          return n ? r.toLowerCase() : r;
        },
            l = {
          YY: String(this.$y).slice(-2),
          YYYY: this.$y,
          M: a + 1,
          MM: O.s(a + 1, 2, "0"),
          MMM: h(n.monthsShort, a, f, 3),
          MMMM: h(f, a),
          D: this.$D,
          DD: O.s(this.$D, 2, "0"),
          d: String(this.$W),
          dd: h(n.weekdaysMin, this.$W, o, 2),
          ddd: h(n.weekdaysShort, this.$W, o, 3),
          dddd: o[this.$W],
          H: String(s),
          HH: O.s(s, 2, "0"),
          h: c(1),
          hh: c(2),
          a: d(s, u, !0),
          A: d(s, u, !1),
          m: String(u),
          mm: O.s(u, 2, "0"),
          s: String(this.$s),
          ss: O.s(this.$s, 2, "0"),
          SSS: O.s(this.$ms, 3, "0"),
          Z: i
        };

        return r.replace(y, function (t, e) {
          return e || l[t] || i.replace(":", "");
        });
      }, m.utcOffset = function () {
        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
      }, m.diff = function (r, d, $) {
        var l,
            y = O.p(d),
            M = w(r),
            m = (M.utcOffset() - this.utcOffset()) * e,
            g = this - M,
            D = O.m(this, M);
        return D = (l = {}, l[c] = D / 12, l[f] = D, l[h] = D / 3, l[o] = (g - m) / 6048e5, l[a] = (g - m) / 864e5, l[u] = g / n, l[s] = g / e, l[i] = g / t, l)[y] || g, $ ? D : O.a(D);
      }, m.daysInMonth = function () {
        return this.endOf(f).$D;
      }, m.$locale = function () {
        return v[this.$L];
      }, m.locale = function (t, e) {
        if (!t) return this.$L;
        var n = this.clone(),
            r = S(t, e, !0);
        return r && (n.$L = r), n;
      }, m.clone = function () {
        return O.w(this.$d, this);
      }, m.toDate = function () {
        return new Date(this.valueOf());
      }, m.toJSON = function () {
        return this.isValid() ? this.toISOString() : null;
      }, m.toISOString = function () {
        return this.$d.toISOString();
      }, m.toString = function () {
        return this.$d.toUTCString();
      }, M;
    }(),
        b = _.prototype;

    return w.prototype = b, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function (t) {
      b[t[1]] = function (e) {
        return this.$g(e, t[0], t[1]);
      };
    }), w.extend = function (t, e) {
      return t.$i || (t(e, _, w), t.$i = !0), w;
    }, w.locale = S, w.isDayjs = p, w.unix = function (t) {
      return w(1e3 * t);
    }, w.en = v[D], w.Ls = v, w.p = {}, w;
  });
})(dayjs_min);

var dayjs = dayjs_min.exports;

var utc$1 = {exports: {}};

(function (module, exports) {
  !function (t, i) {
    module.exports = i() ;
  }(commonjsGlobal, function () {

    var t = "minute",
        i = /[+-]\d\d(?::?\d\d)?/g,
        e = /([+-]|\d\d)/g;
    return function (s, f, n) {
      var u = f.prototype;
      n.utc = function (t) {
        var i = {
          date: t,
          utc: !0,
          args: arguments
        };
        return new f(i);
      }, u.utc = function (i) {
        var e = n(this.toDate(), {
          locale: this.$L,
          utc: !0
        });
        return i ? e.add(this.utcOffset(), t) : e;
      }, u.local = function () {
        return n(this.toDate(), {
          locale: this.$L,
          utc: !1
        });
      };
      var o = u.parse;

      u.parse = function (t) {
        t.utc && (this.$u = !0), this.$utils().u(t.$offset) || (this.$offset = t.$offset), o.call(this, t);
      };

      var r = u.init;

      u.init = function () {
        if (this.$u) {
          var t = this.$d;
          this.$y = t.getUTCFullYear(), this.$M = t.getUTCMonth(), this.$D = t.getUTCDate(), this.$W = t.getUTCDay(), this.$H = t.getUTCHours(), this.$m = t.getUTCMinutes(), this.$s = t.getUTCSeconds(), this.$ms = t.getUTCMilliseconds();
        } else r.call(this);
      };

      var a = u.utcOffset;

      u.utcOffset = function (s, f) {
        var n = this.$utils().u;
        if (n(s)) return this.$u ? 0 : n(this.$offset) ? a.call(this) : this.$offset;
        if ("string" == typeof s && null === (s = function (t) {
          void 0 === t && (t = "");
          var s = t.match(i);
          if (!s) return null;
          var f = ("" + s[0]).match(e) || ["-", 0, 0],
              n = f[0],
              u = 60 * +f[1] + +f[2];
          return 0 === u ? 0 : "+" === n ? u : -u;
        }(s))) return this;
        var u = Math.abs(s) <= 16 ? 60 * s : s,
            o = this;
        if (f) return o.$offset = u, o.$u = 0 === s, o;

        if (0 !== s) {
          var r = this.$u ? this.toDate().getTimezoneOffset() : -1 * this.utcOffset();
          (o = this.local().add(u + r, t)).$offset = u, o.$x.$localOffset = r;
        } else o = this.utc();

        return o;
      };

      var h = u.format;
      u.format = function (t) {
        var i = t || (this.$u ? "YYYY-MM-DDTHH:mm:ss[Z]" : "");
        return h.call(this, i);
      }, u.valueOf = function () {
        var t = this.$utils().u(this.$offset) ? 0 : this.$offset + (this.$x.$localOffset || new Date().getTimezoneOffset());
        return this.$d.valueOf() - 6e4 * t;
      }, u.isUTC = function () {
        return !!this.$u;
      }, u.toISOString = function () {
        return this.toDate().toISOString();
      }, u.toString = function () {
        return this.toDate().toUTCString();
      };
      var l = u.toDate;

      u.toDate = function (t) {
        return "s" === t && this.$offset ? n(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate() : l.call(this);
      };

      var c = u.diff;

      u.diff = function (t, i, e) {
        if (t && this.$u === t.$u) return c.call(this, t, i, e);
        var s = this.local(),
            f = n(t).local();
        return c.call(s, f, i, e);
      };
    };
  });
})(utc$1);

var utc = utc$1.exports;

dayjs.extend(utc);
var DEFAULT_DATE = 'YYYY-MM-DD HH:mm:ss';
function formatUtc(utcString, format) {
    if (format === void 0) { format = DEFAULT_DATE; }
    return dayjs.utc(utcString).utcOffset(8).format(format);
}

function formatCount(count) {
    var counter = parseInt(count);
    if (counter > 100000000) {
        return (counter / 100000000).toFixed(1) + '亿';
    }
    else if (counter > 10000) {
        return (counter / 10000).toFixed(1) + '万';
    }
    else {
        return counter + '';
    }
}
// 12 -> 12
// 5 -> 05
function padLeftZero(time) {
    time = time + '';
    return ('00' + time).slice(time.length);
}
function formatDuration(duration) {
    duration = duration / 1000;
    // 488s / 60 = 8.12
    var minute = Math.floor(duration / 60);
    // 488s % 60
    var second = Math.floor(duration) % 60;
    return padLeftZero(minute) + ':' + padLeftZero(second);
}

function padEnd(str, length, char) {
    if (char === void 0) { char = '0'; }
    return str + char.repeat(Math.max(0, length - str.length));
}
function chunk(str, size) {
    if (size === void 0) { size = 1; }
    var chunked = [];
    var index = 0;
    while (index < str.length) {
        chunked.push(str.substr(index, size));
        index += size;
    }
    return chunked;
}
function mergeObjects(source, target) {
    return Object.assign(source, target);
}
// export function parseHex(value: string): number {
//   return parseInt(value, 16)
// }
var clamp = function (value, min, max) {
    return min < max
        ? value < min
            ? min
            : value > max
                ? max
                : value
        : value < max
            ? max
            : value > min
                ? min
                : value;
};
var upperCase = function (word) {
    return word.toLocaleUpperCase();
};
var lowerCase = function (word) {
    return word.toLocaleLowerCase();
};
function splitStr(str, chars) {
    return str.split(chars)[0];
}
// 保留小数工具
function keepDecimal(value, digits) {
    if (digits === void 0) { digits = 0; }
    var COUNT_VALUE = Math.pow(10, digits);
    return Math.round(value * COUNT_VALUE) / COUNT_VALUE;
}
function has(obj, key) {
    return key.every(function (k) { return obj.hasOwnProperty(k); });
}

function isCssColor(color) {
    return !!color && !!color.match(/^(#|var\(--|(rgb|hsl)a?\()/);
}
function colorToInt(color) {
    var rgb;
    if (typeof color === 'number') {
        rgb = color;
    }
    else if (typeof color === 'string') {
        var c = color[0] === '#' ? color.substring(1) : color;
        if (c.length === 3) {
            c = c
                .split('')
                .map(function (char) { return char + char; })
                .join('');
        }
        if (c.length !== 6) ;
        rgb = parseInt(c, 16);
    }
    else {
        throw new TypeError("Colors can only be numbers or strings, recieved ".concat(color == null ? color : color.constructor.name, " instead"));
    }
    if (rgb < 0) {
        // consoleWarn(`Colors cannot be negative: '${color}'`)
        rgb = 0;
    }
    else if (rgb > 0xffffff || isNaN(rgb)) {
        // consoleWarn(`'${color}' is not a valid rgb color`)
        rgb = 0xffffff;
    }
    return rgb;
}
function intToHex(color) {
    var hexColor = color.toString(16);
    if (hexColor.length < 6)
        hexColor = '0'.repeat(6 - hexColor.length) + hexColor;
    return '#' + hexColor;
}
function colorToHex(color) {
    return intToHex(colorToInt(color));
}
/**
 * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV
 *
 * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]
 */
function HSVAtoRGBA(hsva) {
    var h = hsva.h, s = hsva.s, v = hsva.v, a = hsva.a;
    var f = function (n) {
        var k = (n + h / 60) % 6;
        return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
    };
    var rgb = [f(5), f(3), f(1)].map(function (v) { return Math.round(v * 255); });
    return { r: rgb[0], g: rgb[1], b: rgb[2], a: a };
}
/**
 * Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV
 *
 * @param color RGBA color as an array [0-255, 0-255, 0-255, 0-1]
 */
function RGBAtoHSVA(rgba) {
    if (!rgba)
        return { h: 0, s: 1, v: 1, a: 1 };
    var r = rgba.r / 255;
    var g = rgba.g / 255;
    var b = rgba.b / 255;
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h = 0;
    if (max !== min) {
        if (max === r) {
            h = 60 * (0 + (g - b) / (max - min));
        }
        else if (max === g) {
            h = 60 * (2 + (b - r) / (max - min));
        }
        else if (max === b) {
            h = 60 * (4 + (r - g) / (max - min));
        }
    }
    if (h < 0)
        h = h + 360;
    var s = max === 0 ? 0 : (max - min) / max;
    var hsv = [h, s, max];
    return { h: hsv[0], s: hsv[1], v: hsv[2], a: rgba.a };
}
function HSVAtoHSLA(hsva) {
    var h = hsva.h, s = hsva.s, v = hsva.v, a = hsva.a;
    var l = v - (v * s) / 2;
    var sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l);
    return { h: h, s: sprime, l: l, a: a };
}
function HSLAtoHSVA(hsl) {
    var h = hsl.h, s = hsl.s, l = hsl.l, a = hsl.a;
    var v = l + s * Math.min(l, 1 - l);
    var sprime = v === 0 ? 0 : 2 - (2 * l) / v;
    return { h: h, s: sprime, v: v, a: a };
}
function RGBAtoCSS(rgba) {
    return "rgba(".concat(rgba.r, ", ").concat(rgba.g, ", ").concat(rgba.b, ", ").concat(rgba.a, ")");
}
function RGBtoCSS(rgba) {
    return RGBAtoCSS(_assign(_assign({}, rgba), { a: 1 }));
}
function RGBAtoHex(rgba) {
    var toHex = function (v) {
        var h = Math.round(v).toString(16);
        return ('00'.substr(0, 2 - h.length) + h).toUpperCase();
    };
    return "#".concat([
        toHex(rgba.r),
        toHex(rgba.g),
        toHex(rgba.b),
        toHex(Math.round(rgba.a * 255))
    ].join(''));
}
function HexToRGBA(hex) {
    var rgba = chunk(hex.slice(1), 2).map(function (c) { return parseInt(c, 16); });
    return {
        r: rgba[0],
        g: rgba[1],
        b: rgba[2],
        a: Math.round((rgba[3] / 255) * 100) / 100
    };
}
function HexToHSVA(hex) {
    var rgb = HexToRGBA(hex);
    return RGBAtoHSVA(rgb);
}
function HSVAtoHex(hsva) {
    return RGBAtoHex(HSVAtoRGBA(hsva));
}
function parseHex(hex) {
    if (hex.startsWith('#')) {
        hex = hex.slice(1);
    }
    hex = hex.replace(/([^0-9a-f])/gi, 'F');
    if (hex.length === 3 || hex.length === 4) {
        hex = hex
            .split('')
            .map(function (x) { return x + x; })
            .join('');
    }
    if (hex.length === 6) {
        hex = padEnd(hex, 8, 'F');
    }
    else {
        hex = padEnd(padEnd(hex, 6), 8, 'F');
    }
    return "#".concat(hex).toUpperCase().substr(0, 9);
}
function RGBtoInt(rgba) {
    return (rgba.r << 16) + (rgba.g << 8) + rgba.b;
}
function fromHSVA(hsva) {
    hsva = _assign({}, hsva);
    var hexa = HSVAtoHex(hsva);
    var hsla = HSVAtoHSLA(hsva);
    var rgba = HSVAtoRGBA(hsva);
    return {
        alpha: hsva.a,
        hex: hexa.substr(0, 7),
        hexa: hexa,
        hsla: hsla,
        hsva: hsva,
        hue: hsva.h,
        rgba: rgba
    };
}
function fromRGBA(rgba) {
    var hsva = RGBAtoHSVA(rgba);
    var hexa = RGBAtoHex(rgba);
    var hsla = HSVAtoHSLA(hsva);
    var hsv = { h: hsva.h, s: hsva.s, v: hsva.v };
    var hsl = { h: hsla.h, s: hsla.s, l: hsla.l };
    return {
        alpha: hsva.a,
        hex: hexa.substring(0, 7),
        hexa: hexa,
        hsla: hsla,
        hsva: hsva,
        hsv: hsv,
        hsl: hsl,
        hue: hsva.h,
        rgba: rgba
    };
}
function fromHexa(hexa) {
    var hsva = HexToHSVA(hexa);
    var hsla = HSVAtoHSLA(hsva);
    var rgba = HSVAtoRGBA(hsva);
    return {
        alpha: hsva.a,
        hex: hexa.substring(0, 7),
        hexa: hexa,
        hsla: hsla,
        hsva: hsva,
        hue: hsva.h,
        rgba: rgba
    };
}
function fromHSLA(hsla) {
    var hsva = HSLAtoHSVA(hsla);
    var hexa = HSVAtoHex(hsva);
    var rgba = HSVAtoRGBA(hsva);
    return {
        alpha: hsva.a,
        hex: hexa.substring(0, 7),
        hexa: hexa,
        hsla: hsla,
        hsva: hsva,
        hue: hsva.h,
        rgba: rgba
    };
}
function fromHex(hex) {
    return fromHexa(parseHex(hex));
}
function parseColor(color, oldColor) {
    if (!color)
        return fromRGBA({ r: 255, g: 0, b: 0, a: 1 });
    if (typeof color === 'string') {
        if (color.indexOf('#') !== -1) ;
        else if (color.indexOf('hsl') !== -1) {
            var alpha = null;
            var parts = color
                .replace(/hsla|hsl|\(|\)/gm, '')
                .split(/\s|,/g)
                .filter(function (val) { return val !== ''; })
                .map(function (val) { return parseFloat(val); });
            if (parts.length === 4) {
                alpha = parts[3];
            }
            else if (parts.length === 3) {
                alpha = 1;
            }
            return fromHSLA({ h: parts[0], s: parts[1], l: parts[2], a: alpha });
        }
        else if (color.indexOf('rgb') !== -1) {
            var alpha = null;
            var parts = color
                .replace(/rgba|rgb|\(|\)/gm, '')
                .split(/\s|,/g)
                .filter(function (val) { return val !== ''; })
                .map(function (val) { return parseFloat(val); });
            if (parts.length === 4) {
                alpha = parts[3];
            }
            else if (parts.length === 3) {
                alpha = 1;
            }
            return fromRGBA({ r: parts[0], g: parts[1], b: parts[2], a: alpha });
        }
        else if (color.indexOf('hsv') !== -1) {
            var alpha = null;
            var parts = color
                .replace(/hsva|hsv|\(|\)/gm, '')
                .split(/\s|,/g)
                .filter(function (val) { return val !== ''; })
                .map(function (val) { return parseFloat(val); });
            if (parts.length === 4) {
                alpha = parts[3];
            }
            else if (parts.length === 3) {
                alpha = 1;
            }
            return fromHSVA({ h: parts[0], s: parts[1], v: parts[2], a: alpha });
        }
        if (color === 'transparent')
            return fromHexa('#00000000');
        var hex = parseHex(color);
        if (oldColor && hex === oldColor.hexa) {
            return oldColor;
        }
        else {
            return fromHexa(hex);
        }
    }
    if (typeof color === 'object') {
        if (color.hasOwnProperty('alpha'))
            return color;
        var a = color.hasOwnProperty('a') ? parseFloat(color.a) : 1;
        if (has(color, ['r', 'g', 'b'])) {
            if (oldColor && color === oldColor.rgba)
                return oldColor;
            else
                return fromRGBA(_assign(_assign({}, color), { a: a }));
        }
        else if (has(color, ['h', 's', 'l'])) {
            if (oldColor && color === oldColor.hsla)
                return oldColor;
            else
                return fromHSLA(_assign(_assign({}, color), { a: a }));
        }
        else if (has(color, ['h', 's', 'v'])) {
            if (oldColor && color === oldColor.hsva)
                return oldColor;
            else
                return fromHSVA(_assign(_assign({}, color), { a: a }));
        }
    }
    return fromRGBA({ r: 255, g: 0, b: 0, a: 1 });
}
function stripAlpha(color, stripAlpha) {
    if (stripAlpha) {
        color.a; var rest = __rest(color, ["a"]);
        return rest;
    }
    return color;
}
function extractColor(color, input, mode, showAlpha) {
    // 色相
    var hue = keepDecimal(color.hsla.h, 2);
    // 饱和度
    var hslSaturation = keepDecimal(color.hsla.s, 2);
    // 亮度
    var lightness = keepDecimal(color.hsla.l, 2);
    // red
    var red = keepDecimal(color.rgba.r);
    // green
    var green = keepDecimal(color.rgba.g);
    // blue
    var blue = keepDecimal(color.rgba.b);
    // HSV饱和度
    var hsvSaturation = keepDecimal(color.hsva.s, 2);
    // value
    var value = keepDecimal(color.hsva.v, 2);
    if (input == null)
        return color;
    function isShowAlpha(mode) {
        return showAlpha ? mode + 'a' : mode;
    }
    if (typeof input === 'string') {
        if (mode === 'hex') {
            return showAlpha ? color.hexa : color.hex;
        }
        else if (mode === 'hsl') {
            return "".concat(isShowAlpha(mode), "(").concat(hue, ", ").concat(hslSaturation, ", ").concat(lightness).concat(showAlpha ? ', ' + color.alpha : '', ")");
        }
        else if (mode === 'rgb') {
            return "".concat(isShowAlpha(mode), "(").concat(red, ", ").concat(green, ", ").concat(blue).concat(showAlpha ? ', ' + color.alpha : '', ")");
        }
        else if (mode === 'hsv') {
            return "".concat(isShowAlpha(mode), "(").concat(hue, ", ").concat(hsvSaturation, ", ").concat(value).concat(showAlpha ? ', ' + color.alpha : '', ")");
        }
        return input.length === 7 ? color.hex : color.hexa;
    }
    if (typeof input === 'object') {
        var shouldStrip = typeof input.a === 'number' && input.a === 0 ? !!input.a : !input.a;
        if (has(input, ['r', 'g', 'b']))
            return stripAlpha(color.rgba, shouldStrip);
        else if (has(input, ['h', 's', 'l']))
            return stripAlpha(color.hsla, shouldStrip);
        else if (has(input, ['h', 's', 'v']))
            return stripAlpha(color.hsva, shouldStrip);
    }
}
function hasAlpha(color) {
    if (!color)
        return false;
    if (typeof color === 'string') {
        return color.length > 7;
    }
    if (typeof color === 'object') {
        return has(color, ['a']) || has(color, ['alpha']);
    }
    return false;
}
function RGBtoRGBA(rgba) {
    if (typeof rgba === 'string') {
        rgba = (/rgba?\((.*?)\)/.exec(rgba) || ['', '0,0,0,1'])[1].split(',');
        return {
            r: Number(rgba[0]) || 0,
            g: Number(rgba[1]) || 0,
            b: Number(rgba[2]) || 0,
            a: Number(rgba[3] ? rgba[3] : 1) // Avoid the case of 0
        };
    }
    else {
        return rgba;
    }
}
function RGBtoHSV(rgb) {
    if (!rgb)
        return { h: 0, s: 1, v: 1 };
    var r = rgb.r / 255;
    var g = rgb.g / 255;
    var b = rgb.b / 255;
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h = 0;
    if (max !== min) {
        if (max === r) {
            h = 60 * (0 + (g - b) / (max - min));
        }
        else if (max === g) {
            h = 60 * (2 + (b - r) / (max - min));
        }
        else if (max === b) {
            h = 60 * (4 + (r - g) / (max - min));
        }
    }
    if (h < 0)
        h = h + 360;
    var s = max === 0 ? 0 : (max - min) / max;
    var hsv = [h, s, max];
    return { h: hsv[0], s: hsv[1].toFixed(2), v: hsv[2].toFixed(2) };
}
function HSVtoHSL(hsv) {
    var h = hsv.h, s = hsv.s, v = hsv.v;
    var l = Number((v - (v * s) / 2).toFixed(2));
    var sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l);
    return { h: h, s: Number(sprime.toFixed(2)), l: l };
}

var NumberUtils = /** @class */ (function () {
    function NumberUtils() {
    }
    /**
     * 取区间数
     * @return 返回的value介于A、B之间，若value小于min，返回min，若大于max，返回max
     *
     * @param a
     * @param b
     * @param c
     */
    NumberUtils.range = function (a, b, c) {
        return Math.min(Math.max(a, b), c);
    };
    NumberUtils.clamp = function (value, min, max) {
        return min < max
            ? value < min
                ? min
                : value > max
                    ? max
                    : value
            : value < max
                ? max
                : value > min
                    ? min
                    : value;
    };
    return NumberUtils;
}());

var keyCodes = Object.freeze({
    enter: 13,
    tab: 9,
    delete: 46,
    esc: 27,
    space: 32,
    up: 38,
    down: 40,
    left: 37,
    right: 39,
    end: 35,
    home: 36,
    del: 46,
    backspace: 8,
    insert: 45,
    pageup: 33,
    pagedown: 34,
    shift: 16
});

var Cache = /** @class */ (function () {
    function Cache(local) {
        if (local === void 0) { local = true; }
        this.storage = local ? localStorage : sessionStorage;
    }
    Cache.prototype.setItem = function (key, value) {
        this.storage.setItem(key, JSON.stringify(value));
    };
    Cache.prototype.getItem = function (key) {
        var value = this.storage.getItem(key);
        if (value) {
            return JSON.parse(value);
        }
    };
    Cache.prototype.removeItem = function (key) {
        this.storage.removeItem(key);
    };
    Cache.prototype.clear = function (key) {
        this.storage.clear();
    };
    Cache.prototype.key = function (index) {
        return this.storage.key(index);
    };
    Cache.prototype.length = function () {
        return this.storage.length;
    };
    return Cache;
}());
var localCache = new Cache();
var sessionCache = new Cache();

// 是否为数组
var isArray = Array.isArray;
// 判断类型
var objectToString = Object.prototype.toString;
var toTypeString = function (value) {
    return objectToString.call(value);
};
// 是否为map
var isMap = function (val) {
    return toTypeString(val) === '[object Map]';
};
// 是否为set
var isSet = function (val) {
    return toTypeString(val) === '[object Set]';
};
// 是否日期
var isDate = function (val) { return val instanceof Date; };
// 是否函数
var isFunction = function (val) {
    return typeof val === 'function';
};
// 是否string
var isString = function (val) { return typeof val === 'string'; };
// 是否symbol
var isSymbol = function (val) { return typeof val === 'symbol'; };
// 是否object
var isObject = function (val) {
    return val !== null && typeof val === 'object';
};
var toRawType = function (value) {
    return toTypeString(value).slice(8, -1);
};
var isHTMLElement = function (val) { return toRawType(val).startsWith('HTML'); };
var isPromise = function (val) {
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
var isNull = function (val) { return val === null; };
var isDef = function (val) { return val === undefined; };
var isEmpty = function (val) {
    return ((!val && val !== 0 && val !== '') ||
        (isArray(val) && !val.length) ||
        (isObject(val) && !Object.keys(val).length));
};

var DOMUtils = /** @class */ (function () {
    function DOMUtils() {
    }
    DOMUtils.isWindow = function (val) {
        return val === window;
    };
    /**
     * 添加事件
     *
     *
     * @param element 如果为null将不会添加事件
     * @param event
     * @param handler
     * @param options
     */
    DOMUtils.addEventListener = function (element, event, handler, options) {
        if (options === void 0) { options = false; }
        if (element && event && handler) {
            element.addEventListener(event, handler, options);
        }
    };
    /**
     * 移除事件
     *
     * @param element 如果为null将不会移除事件
     * @param event
     * @param handler
     * @param options
     */
    DOMUtils.removeEventListener = function (element, event, handler, options) {
        if (options === void 0) { options = false; }
        if (element && event && handler) {
            element.removeEventListener(event, handler, options);
        }
    };
    /**
     * 触发拖拽事件
     *
     * @param element
     * @param options
     */
    DOMUtils.triggerDragEvent = function (element, options) {
        var isDragging = false;
        var moveFn = function (event) {
            var _a;
            (_a = options.drag) === null || _a === void 0 ? void 0 : _a.call(options, event);
        };
        var upFn = function (event) {
            var _a;
            DOMUtils.removeEventListener(document, 'mousemove', moveFn);
            DOMUtils.removeEventListener(document, 'mouseup', upFn);
            DOMUtils.removeEventListener(document, 'touchmove', moveFn);
            DOMUtils.removeEventListener(document, 'touchend', upFn);
            document.onselectstart = null;
            document.ondragstart = null;
            isDragging = false;
            (_a = options.end) === null || _a === void 0 ? void 0 : _a.call(options, event);
        };
        var downFn = function (event) {
            var _a;
            if (isDragging)
                return;
            document.onselectstart = function () { return false; };
            document.ondragstart = function () { return false; };
            DOMUtils.addEventListener(document, 'mousemove', moveFn);
            DOMUtils.addEventListener(document, 'mouseup', upFn);
            DOMUtils.addEventListener(document, 'touchmove', moveFn);
            DOMUtils.addEventListener(document, 'touchend', upFn);
            isDragging = true;
            (_a = options.start) === null || _a === void 0 ? void 0 : _a.call(options, event);
        };
        DOMUtils.addEventListener(element, 'mousedown', downFn);
        DOMUtils.addEventListener(element, 'touchstart', downFn);
        return;
    };
    DOMUtils.getBoundingClientRect = function (element) {
        if (element &&
            isObject(element) &&
            element.nodeType === 1 /* ELEMENT_NODE */) {
            return element.getBoundingClientRect();
        }
        return null;
    };
    /**
     * 判断是否存在className样式
     *
     * @param element
     * @param className
     */
    DOMUtils.hasClass = function (element, className) {
        if (element &&
            isObject(element) &&
            isString(className) &&
            element.nodeType === 1 /* ELEMENT_NODE */) {
            return element.classList.contains(className.trim());
        }
        return false;
    };
    /**
     * 添加样式
     *
     * @param element
     * @param className
     */
    DOMUtils.addClass = function (element, className) {
        if (element &&
            isObject(element) &&
            isString(className) &&
            element.nodeType === 1 /* ELEMENT_NODE */) {
            className = className.trim();
            if (!DOMUtils.hasClass(element, className)) {
                var cl = element.className;
                element.className = cl ? cl + ' ' + className : className;
            }
        }
    };
    /**
     * 移除样式
     *
     * @param element
     * @param className
     */
    DOMUtils.removeClass = function (element, className) {
        if (element &&
            isObject(element) &&
            isString(className) &&
            element.nodeType === 1 /* ELEMENT_NODE */ &&
            typeof element.className === 'string') {
            className = className.trim();
            var classes = element.className.trim().split(' ');
            for (var i = classes.length - 1; i >= 0; i--) {
                classes[i] = classes[i].trim();
                if (!classes[i] || classes[i] === className) {
                    classes.splice(i, 1);
                }
            }
            element.className = classes.join(' ');
        }
    };
    /**
     * 切换样式
     *
     * @param element
     * @param className
     * @param force
     */
    DOMUtils.toggleClass = function (element, className, force) {
        if (element &&
            isObject(element) &&
            isString(className) &&
            element.nodeType === 1 /* ELEMENT_NODE */) {
            element.classList.toggle(className, force);
        }
    };
    /**
     * 替换样式
     *
     * @param element
     * @param oldClassName
     * @param newClassName
     */
    DOMUtils.replaceClass = function (element, oldClassName, newClassName) {
        if (element &&
            isObject(element) &&
            isString(oldClassName) &&
            isString(newClassName) &&
            element.nodeType === 1 /* ELEMENT_NODE */) {
            oldClassName = oldClassName.trim();
            newClassName = newClassName.trim();
            DOMUtils.removeClass(element, oldClassName);
            DOMUtils.addClass(element, newClassName);
        }
    };
    DOMUtils.getScrollTop = function (el) {
        var top = 'scrollTop' in el ? el.scrollTop : el.pageYOffset;
        // iOS scroll bounce cause minus scrollTop
        return Math.max(top, 0);
    };
    DOMUtils.setScrollTop = function (el, value) {
        if ('scrollTop' in el) {
            el.scrollTop = value;
        }
        else {
            el.scrollTo(el.scrollX, value);
        }
    };
    DOMUtils.getRootScrollTop = function () {
        return (window.pageYOffset ||
            document.documentElement.scrollTop ||
            document.body.scrollTop ||
            0);
    };
    DOMUtils.setRootScrollTop = function (value) {
        DOMUtils.setScrollTop(window, value);
        DOMUtils.setScrollTop(document.body, value);
    };
    DOMUtils.getElementTop = function (el, scroller) {
        if (DOMUtils.isWindow(el)) {
            return 0;
        }
        var scrollTop = scroller
            ? DOMUtils.getScrollTop(scroller)
            : DOMUtils.getRootScrollTop();
        return el.getBoundingClientRect().top + scrollTop;
    };
    DOMUtils.getVisibleHeight = function (el) {
        if (DOMUtils.isWindow(el)) {
            return el.innerHeight;
        }
        return el.getBoundingClientRect().height;
    };
    DOMUtils.isHidden = function (el) {
        if (!el) {
            return false;
        }
        var style = window.getComputedStyle(el);
        var hidden = style.display === 'none';
        // 在以下情况下，offsetParent返回null:
        // 1. 元素或其父元素的display属性设置为none.
        // 2. 元素的position属性设置为fixed
        var parentHidden = el.offsetParent === null && style.position !== 'fixed';
        return hidden || parentHidden;
    };
    /**
     * 触发事件
     *
     * @param el
     * @param type
     */
    DOMUtils.triggerEvent = function (el, type) {
        if ('createEvent' in document) {
            // modern browsers, IE9+
            var e = document.createEvent('HTMLEvents');
            e.initEvent(type, false, true);
            el.dispatchEvent(e);
        }
    };
    /**
     * 计算相对于中心点的旋转角度
     * @param element
     * @param event
     */
    DOMUtils.calcAngle = function (element, event) {
        var rect = element.getBoundingClientRect();
        var originX = rect.left + rect.width / 2;
        var originY = rect.top + rect.height / 2;
        //获得中心点和鼠标坐标连线，与y轴正半轴之间的夹角
        var x = Math.abs(originX - event.clientX);
        var y = Math.abs(originY - event.clientY);
        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
        var cos = y / z;
        var rad = Math.acos(cos); //用反三角函数求弧度
        var angle = Math.floor(180 / (Math.PI / rad)); //将弧度转换成角度
        if (event.clientX > originX && event.clientY > originY) {
            //鼠标在第四象限
            angle = 180 - angle;
        }
        if (event.clientX == originX && event.clientY > originY) {
            //鼠标在y轴负方向上
            angle = 180;
        }
        if (event.clientX > originX && event.clientY == originY) {
            //鼠标在x轴正方向上
            angle = 90;
        }
        if (event.clientX < originX && event.clientY > originY) {
            //鼠标在第三象限
            angle = 180 + angle;
        }
        if (event.clientX < originX && event.clientY == originY) {
            //鼠标在x轴负方向
            angle = 270;
        }
        if (event.clientX < originX && event.clientY < originY) {
            //鼠标在第二象限
            angle = 360 - angle;
        }
        return angle;
    };
    /**
     * querySelector
     *
     * @param selectors
     * @param parentElement
     */
    DOMUtils.querySelector = function (selectors, parentElement) {
        if (parentElement) {
            return parentElement.querySelector(selectors);
        }
        return document.querySelector(selectors);
    };
    return DOMUtils;
}());

var toString = Object.prototype.toString();
// export function isArray(val: unknown): boolean {
//   return toString.call(val) === '[object Array]';
// }
// typeof null = "Object"
function isUndefined(val) {
    return typeof val === 'undefined';
}
// buffer
function isBuffer(val) {
    return (val !== null &&
        !isUndefined(val) &&
        val.constructor !== null &&
        !isUndefined(val.constructor) &&
        typeof val.constructor.isBuffer === 'function' &&
        val.constructor.isBuffer(val));
}
function isFormData(val) {
    return typeof FormData !== 'undefined' && val instanceof FormData;
}
// export function isObject(val) {
//   return val !== null && typeof val === 'object'
// }
// 其实就是判断目标对象的原型是不是`null` 或 `Object.prototype`
function isPlainObject(val) {
    if (Object.prototype.toString.call(val) !== '[object Object]') {
        return false;
    }
    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
}
// export function isDate(val) {
//   return Object.prototype.toString.call(val) === '[object Date]';
// }
function isFile(val) {
    return Object.prototype.toString.call(val) === '[object File]';
}
function isBlob(val) {
    return Object.prototype.toString.call(val) === '[object Blob]';
}
// export function isFunction(val) {
//   return Object.prototype.toString.call(val) === '[object Function]';
// }
// export function isStream(val) {
//   return isObject(val) && isFunction(val.pipe);
// }
function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

// pow  返回 基数的指数次幂 t ** power
var pow = Math.pow;
var sqrt = Math.sqrt;
var easeOutCubic = function (x) {
    return 1 - pow(1 - x, 3);
};
var linear = function (x) { return x; };
var easeOutExpo = function (x) {
    return x === 1 ? 1 : 1 - pow(2, -10 * x);
};
var easeInOutExpo = function (x) {
    return x === 0
        ? 0
        : x === 1
            ? 1
            : x < 0.5
                ? pow(2, 20 * x - 10) / 2
                : (2 - pow(2, -20 * x + 10)) / 2;
};
var easeInExpo = function (x) {
    return x === 0 ? 0 : pow(2, 10 * x - 10);
};
var easeInOutCirc = function (x) {
    return x < 0.5
        ? (1 - sqrt(1 - pow(2 * x, 2))) / 2
        : (sqrt(1 - pow(-2 * x + 2, 2)) + 1) / 2;
};

var easing = /*#__PURE__*/Object.freeze({
  __proto__: null,
  easeOutCubic: easeOutCubic,
  linear: linear,
  easeOutExpo: easeOutExpo,
  easeInOutExpo: easeInOutExpo,
  easeInExpo: easeInExpo,
  easeInOutCirc: easeInOutCirc
});

var Tween = /** @class */ (function () {
    function Tween(options) {
        var from = options.from, to = options.to, duration = options.duration, delay = options.delay, easing = options.easing, onStart = options.onStart, onUpdate = options.onUpdate, onFinish = options.onFinish;
        for (var key in from) {
            if (to[key] === undefined) {
                to[key] = from[key];
            }
        }
        for (var key in to) {
            if (from[key] === undefined) {
                from[key] = to[key];
            }
        }
        this.from = from;
        this.to = to;
        this.duration = duration;
        this.delay = delay;
        this.easing = easing;
        this.onStart = onStart;
        this.onUpdate = onUpdate;
        this.onFinish = onFinish;
        this.startTime = Date.now() + this.delay;
        this.started = false;
        this.finished = false;
        this.timer = null;
        this.keys = {};
    }
    Tween.prototype.update = function () {
        this.time = Date.now();
        // delay some time
        if (this.time < this.startTime) {
            return;
        }
        if (this.finished) {
            return;
        }
        // finish animation
        if (this.elapsed === this.duration) {
            if (!this.finished) {
                this.finished = true;
                this.onFinish && this.onFinish(this.keys);
            }
            return;
        }
        // elapsed 时间 和  duration 时间比较 逝去光阴
        this.elapsed = this.time - this.startTime;
        // 防止 时间 一直 流逝 ~
        this.elapsed = this.elapsed > this.duration ? this.duration : this.elapsed;
        // 从0 到 1 elapsed time
        for (var key in this.to) {
            this.keys[key] =
                this.from[key] +
                    (this.to[key] - this.from[key]) *
                        easing[this.easing](this.elapsed / this.duration);
        }
        if (!this.started) {
            this.onStart && this.onStart(this.keys);
            this.started = true;
        }
        this.onUpdate(this.keys);
    };
    // 递归 重绘
    Tween.prototype.start = function () {
        var _this = this;
        this.startTime = Date.now() + this.delay;
        var tick = function () {
            _this.update();
            _this.timer = requestAnimationFrame(tick);
            if (_this.finished) {
                // 在判断 update中 结束后 停止 重绘
                cancelAnimationFrame(_this.timer);
                _this.timer = null;
            }
        };
        tick();
    };
    Tween.prototype.stop = function () {
        cancelAnimationFrame(this.timer);
        this.timer = null;
    };
    return Tween;
}());

export { Cache, DOMUtils, HSLAtoHSVA, HSVAtoHSLA, HSVAtoHex, HSVAtoRGBA, HSVtoHSL, HexToHSVA, HexToRGBA, NumberUtils, RGBAtoCSS, RGBAtoHSVA, RGBAtoHex, RGBtoCSS, RGBtoHSV, RGBtoInt, RGBtoRGBA, Tween, chunk, clamp, colorToHex, colorToInt, debounce, deepClone, extractColor, formatCount, formatDuration, formatUtc, fromHSLA, fromHSVA, fromHex, fromHexa, fromRGBA, has, hasAlpha, intToHex, isArray, isBlob, isBuffer, isCssColor, isDate, isDef, isEmpty, isFile, isFormData, isFunction, isHTMLElement, isMap, isNull, isObject, isPlainObject, isPromise, isSet, isString, isSymbol, isUndefined, keepDecimal, keyCodes, localCache, lowerCase, mergeObjects, objectToString, padEnd, parseColor, parseHex, sessionCache, splitStr, stripAlpha, throttle, toRawType, toString, toTypeString, trim, upperCase };
